<div class="switch-toggle @(Value ? "on" : null) @(Disabled ? "is-disabled" : null)"
     role="switch"
     tabindex="@(Disabled ? -1 : 0)"
     aria-checked="@Value"
     aria-label="@AriaLabel"
     @onkeydown="OnKeyDown">

    <img src="svg/gridIcon.svg" alt="Grid" @onclick="() => OnIconClick(false)" @onclick:stopPropagation="true" />
    <img src="svg/cardViewIcon.svg" alt="Card" @onclick="() => OnIconClick(true)" @onclick:stopPropagation="true" />

    <div class="thumb">
        @if (!Value)
        {
            <img src="svg/gridIconFalse.svg" alt="GridFalse"/>
        }
        else
        {
            <img src="svg/cardViewIconFalse.svg" alt="CardFalse" />
        }
    </div>

</div>

@code {
    [Parameter] public bool Value { get; set; }
    [Parameter] public EventCallback<bool> ValueChanged { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string? AriaLabel { get; set; } = "Alternar exibição";

    // Clique apenas nos ícones muda o estado
    private async Task OnIconClick(bool target)
    {
        if (Disabled) return;
        await SetValue(target);
    }

    protected async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (Disabled) return;
        switch (e.Key)
        {
            case " ":
            case "Enter":
                await SetValue(!Value); break;
            case "ArrowLeft":
                await SetValue(false); break;
            case "ArrowRight":
                await SetValue(true); break;
        }
    }

    private async Task SetValue(bool v)
    {
        if (v == Value) return;
        Value = v;
        await ValueChanged.InvokeAsync(v);
    }
}