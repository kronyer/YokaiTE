<div class="document-edit-top" @onmousedown:preventDefault="true">
    <div class="doc-edit-top-nav">
        <div class="doc-edit-top-left">
            <button @onclick="BackHome">
                <img src="svg/logo.svg" alt="Home" />
                </button>

            <div class="file-name-container">
                <span class="file-name" @onclick="EnableTitleEdit" style="display:@(isEditingTitle ? "none" : "inline")">
                    @Document?.Title
                </span>
                <input class="file-name"
                       @bind="EditTitle"
                       @bind:event="oninput"
                       @onblur="SaveTitleEdit"
                       @onkeydown="HandleTitleKeyDown"
                       style="width:280px; max-width:280px; display:@(isEditingTitle ? "inline" : "none")" />
                <button>
                    <img src="svg/arrow_down.svg"  alt="Expandir" />
                </button>
            </div>
        </div>
        <div class="doc-edit-top-right">
            @if (IsSaved)
            {
                <img src="svg/saved_check.svg" width="16" height="16" alt="Salvo" />
                <span class="saved-span">Salvo</span>
            }
            else
            {
            }
        </div>
    </div>
    <div class="toolbar-top-container">
        <div class="font-toolbar w-25">
            <NormalSelect Label="Fonte" Options="possibleFonts" ValueChanged="OnFontFamilyChanged" Value="SelectedFont"></NormalSelect>
            <NormalSelect Label="Tamanho" Options="possibleFontSizes" ValueChanged="OnFontSizeChanged" Value="@SelectedFontSize"></NormalSelect>
        </div>
        <div class="style-toolbar w-75">
            <button class="style-btn @(false ? "active" : "")">
                <img src="svg/font_color.svg" alt="Font Color" />
            </button>
            <button class="style-btn @(false ? "active" : "")">
                <img src="svg/font_highlight.svg" alt="Font Hightlight" />
            </button>
            <div style="width: 1px;
    height: 20px; background: #BABABA;"></div>
            <button @onclick="OnBold" class="style-btn @(IsBold ? "active" : "")">
                <img src="svg/bold.svg" alt="Font Hightlight" />
            </button>
            <button @onclick="OnItalic" class="style-btn @(IsItalic ? "active" : "")">
                <img src="svg/italic.svg" alt="Font Hightlight" />
                
            </button>
            <button @onclick="OnStrikeThrough" class="style-btn @(IsStrikeThrough ? "active" : "")">
                <img src="svg/strikethrough.svg" alt="Font Hightlight" />
            </button>
            <button @onclick="OnUnderline" class="style-btn @(IsUnderline ? "active" : "")">
                <img src="svg/underline.svg" alt="Font Hightlight" />
            </button>
            <div style="width: 1px;
        height: 20px; background: #BABABA;"></div>
            <button @onclick='() => OnTextAlignChanged.InvokeAsync("center")' class="style-btn @(CurrentTextAlign == "center" ? "active" : "")">
                <img src="svg/center.svg" alt="Centralizar" />
            </button>
            <button @onclick='() => OnTextAlignChanged.InvokeAsync("full")' class="style-btn @(CurrentTextAlign == "full" ? "active" : "")">
                <img src="svg/justify.svg" alt="Justificar" />
            </button>
            <button @onclick='() => OnTextAlignChanged.InvokeAsync("left")' class="style-btn @(CurrentTextAlign == "left" ? "active" : "")">
                <img src="svg/left.svg" alt="Esquerda" />
            </button>
            <button @onclick='() => OnTextAlignChanged.InvokeAsync("right")' class="style-btn @(CurrentTextAlign == "right" ? "active" : "")">
                <img src="svg/right.svg" alt="Direita" />
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public Document Document { get; set; }
    [Parameter] public bool IsSaved { get; set; }
    [Parameter] public EventCallback BackHome { get; set; }
    [Parameter] public EventCallback<string> TitleChanged { get; set; }
    [Parameter] public string SelectedFont { get; set; }
    [Parameter] public EventCallback<string> SelectedFontChanged { get; set; }
    [Parameter] public EventCallback<string> SelectedFontSizeChanged { get; set; }
    private bool isEditingTitle = false;
    [Parameter] public EventCallback OnBold { get; set; }
    [Parameter] public EventCallback OnItalic { get; set; }
    [Parameter] public EventCallback OnStrikeThrough { get; set; }
    [Parameter] public EventCallback OnUnderline { get; set; }
    [Parameter] public bool IsBold { get; set; }
    [Parameter] public bool IsItalic { get; set; }
    [Parameter] public bool IsUnderline { get; set; }
    [Parameter] public bool IsStrikeThrough { get; set; }
    private string EditTitle = "";
    [Parameter] public string CurrentTextAlign { get; set; } = "left";

    [Parameter] public string SelectedFontSize { get; set; }

    private List<YokaiTE.Component.NormalSelect.SelectOption> possibleFonts = new()
{
    new("Arial", "Arial"),
    new("Times New Roman", "Times New Roman")
};

    [Parameter] public EventCallback<string> OnFontColorChanged { get; set; }
    [Parameter] public EventCallback<string> OnHighlightColorChanged { get; set; }
    [Parameter] public EventCallback<string> OnFontSizeChanged { get; set; }
    [Parameter] public EventCallback<string> OnFontFamilyChanged { get; set; }
    [Parameter] public EventCallback<string> OnTextAlignChanged { get; set; }

    private string selectedFontColor = "#000000";
    private string selectedHighlightColor = "#FFFF00";
    private string selectedFontSize = "3";
    private string selectedFont = "Arial";

    private List<NormalSelect.SelectOption> possibleFontSizes = new()
{
    new("10px", "10px"),
    new("12px", "12px"),
    new("14px", "14px"),
    new("16px", "16px"),
    new("18px", "18px"),
    new("24px", "24px"),
    new("32px", "32px")
};

    private List<NormalSelect.SelectOption> fontColors = new()
    {
        new("Preto", "#000000"),
        new("Vermelho", "#FF0000"),
        new("Azul", "#0000FF"),
        new("Verde", "#00FF00"),
        new("Amarelo", "#FFFF00")
    };

    private List<NormalSelect.SelectOption> highlightColors = new()
    {
        new("Amarelo", "#FFFF00"),
        new("Verde", "#00FF00"),
        new("Ciano", "#00FFFF"),
        new("Rosa", "#FF00FF"),
        new("Nenhum", "#FFFFFF")
    };

    private void EnableTitleEdit()
    {
        isEditingTitle = true;
        EditTitle = Document?.Title ?? "";
    }

    private async Task SaveTitleEdit()
    {
        if (!string.IsNullOrWhiteSpace(EditTitle))
            await TitleChanged.InvokeAsync(EditTitle);
        isEditingTitle = false;
    }

    private async Task HandleTitleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await SaveTitleEdit();
        else if (e.Key == "Escape")
            isEditingTitle = false;
    }
}