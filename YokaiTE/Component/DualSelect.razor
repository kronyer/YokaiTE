@using YokaiTE.Enums

<div class="dual-select">
    <button @onclick="ToggleOpen" class="select-btn">
        <span class="opt-span">
            @(Value ?? "Selecione...")
        </span>
        <img src="svg/arrow_down.svg" width="16" height="16" alt="Expandir"/>
    </button>
    @if (isOpen)
    {
        <div class="dual-select-backdrop" @onclick="Close"></div>

        <div class="dropdown-select">
            <div class="group">
                <div class="label">Ordenar por:</div>
                @foreach (var option in Options)
                {
                    <div class="item @(Value == option ? "active" : null)"
                         @onclick="() => OnValueChange(option)">
                        @if (Value == option)
                        {
                            <img src="svg/check.svg" width="16" height="16" alt="Selecionado"/>
                        }
                        else
                        {
                            <div class="invisible-check"></div>
                        }
                        <span class="opt-span">@option</span>
                    </div>
                }
            </div>

            <div class="group">
                <div class="label">Ordem:</div>
                <div class="item @(Order == SortOrder.Asc ? "active" : null)"
                     @onclick="() => OnOrderChange(SortOrder.Asc)">
                    @if (Order == SortOrder.Asc)
                    {
                        <img src="svg/check.svg" width="16" height="16" alt="Selecionado"/>
                    }
                    else
                    {
                        <div class="invisible-check"></div>
                    }
                    <span class="opt-span">Crescente</span>
                </div>
                <div class="item @(Order == SortOrder.Desc ? "active" : null)"
                     @onclick="() => OnOrderChange(SortOrder.Desc)">
                    @if (Order == SortOrder.Desc)
                    {
                        <img src="svg/check.svg" width="16" height="16" alt="Selecionado"/>
                    }
                    else
                    {
                        <div class="invisible-check"></div>
                    }
                    <span class="opt-span">Decrescente</span>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    [Parameter] public SortOrder Order { get; set; }
    [Parameter] public EventCallback<SortOrder> OrderChanged { get; set; }

    [Parameter] public List<string> Options { get; set; } = new();

    private bool isOpen = false;

    private void ToggleOpen() => isOpen = !isOpen;

    private async Task OnValueChange(string v)
    {
        if (Value != v)
        {
            Value = v;
            await ValueChanged.InvokeAsync(v);
        }
    }

    private async Task OnOrderChange(SortOrder o)
    {
        if (Order != o)
        {
            Order = o;
            await OrderChanged.InvokeAsync(o);
        }
    }

    private void Close()
    {
        isOpen = false;
        StateHasChanged();
    }

}

