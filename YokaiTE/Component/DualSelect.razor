@using YokaiTE.Enums

<div class="dual-select">
    <button @onclick="ToggleOpen" class="select-btn">
        <span class="opt-span">
            @(Value ?? "Selecione...")
        </span>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
            <g clip-path="url(#clip0_2_150)">
                <path d="M13 6L8 11L3 6" stroke="#181818" stroke-linecap="round" stroke-linejoin="round" />
            </g>
            <defs>
                <clipPath id="clip0_2_150">
                    <rect width="16" height="16" fill="white" />
                </clipPath>
            </defs>
        </svg> 
    </button>
    @if (isOpen)
    {
        <div class="dropdown-select">
        <div class="group">
            <div class="label">Ordenar por:</div>
            @foreach (var option in Options)
            {
                <div class="item @(Value == option ? "active" : null)"
                     @onclick="() => OnValueChange(option)">
                        @if (Value == option)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
                                <path d="M2.5 9L6 12.5L14 4.5" stroke="#181818" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                        }
                        else
                        {
                            <div class="invisible-check"></div>
                        }
                        <span class="opt-span">@option</span>
                </div>
            }
        </div>

        <div class="group">
            <div class="label">Ordem:</div>
            <div class="item @(Order == SortOrder.Asc ? "active" : null)"
                 @onclick="() => OnOrderChange(SortOrder.Asc)">
                    @if (Order == SortOrder.Asc)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
                            <path d="M2.5 9L6 12.5L14 4.5" stroke="#181818" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    }
                    else
                    {
                        <div class="invisible-check"></div>
                    }
                    <span class="opt-span">Crescente</span>
            </div>
            <div class="item @(Order == SortOrder.Desc ? "active" : null)"
                 @onclick="() => OnOrderChange(SortOrder.Desc)">
                    @if (Order == SortOrder.Desc)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
                            <path d="M2.5 9L6 12.5L14 4.5" stroke="#181818" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    }
                    else
                    {
                        <div class="invisible-check"></div>
                    }
                    <span class="opt-span">Decrescente</span>
            </div>
        </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    [Parameter] public SortOrder Order { get; set; }
    [Parameter] public EventCallback<SortOrder> OrderChanged { get; set; }

    [Parameter] public List<string> Options { get; set; } = new();

    private bool isOpen = false;

    private void ToggleOpen() => isOpen = !isOpen;
    
    private async Task OnValueChange(string v)
    {
        if (Value != v)
        {
            Value = v;
            await ValueChanged.InvokeAsync(v);
        }
    }

    private async Task OnOrderChange(SortOrder o)
    {
        if (Order != o)
        {
            Order = o;
            await OrderChanged.InvokeAsync(o);
        }
    }
}

